{"version":3,"sources":["contexts/LanguageContext.js","components/Field.js","contexts/ColorContext.js","components/Button.js","components/UserCreate.js","components/App.js","index.js"],"names":["React","createContext","Field","state","text","this","context","className","Component","contextType","LanguageContext","Button","color","Consumer","value","ColorContext","renderButton","UserCreate","App","onLanguageChange","language","setState","onClick","Provider","ReactDOM","render","document","getElementById"],"mappings":"yLAEeA,MAAMC,cAAc,SCC7BC,E,2MAEJC,MAAQ,G,wEAEN,IAAMC,EAAwB,YAAjBC,KAAKC,QAAwB,OAAS,OACnD,OACE,yBAAKC,UAAU,YACb,+BAAQH,GACR,qC,GARYJ,IAAMQ,WAApBN,EACGO,YAAcC,EAaRR,QCfAF,MAAMC,gBCEfU,E,qLAYSC,GACX,OACE,4BAAQL,UAAS,oBAAeK,IAC9B,kBAACF,EAAgBG,SAAjB,KACG,SAAAC,GAAK,MAAe,YAAVA,EAAsB,SAAW,kB,+BAM1C,IAAD,OACP,OACE,kBAACC,EAAaF,SAAd,KACG,SAAAD,GAAK,OAAI,EAAKI,aAAaJ,S,GAzBfZ,IAAMQ,WAArBG,EAUGF,YAAcC,EAqBRC,QCtBAM,EATI,WACjB,OACE,yBAAKV,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QC6BSW,E,2MA9Bbf,MAAQ,G,EAERgB,iBAAmB,SAAAC,GACjB,EAAKC,SAAS,CAAED,c,wEAGR,IAAD,OACP,OACE,yBAAKb,UAAU,gBACb,gDAEE,uBACEA,UAAU,UACVe,QAAS,kBAAM,EAAKH,iBAAiB,cAEvC,uBACEZ,UAAU,UACVe,QAAS,kBAAM,EAAKH,iBAAiB,aAGzC,kBAACJ,EAAaQ,SAAd,CAAuBT,MAAM,OAC3B,kBAACJ,EAAgBa,SAAjB,CAA0BT,MAAOT,KAAKF,MAAMiB,UAC1C,kBAAC,EAAD,a,GAvBMpB,IAAMQ,WCDxBgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.58b98b5f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default React.createContext(\"dutch\");\n\n//NOTES\n// Any type of valid Js can be passed into createConext object.\n\n/* Default value  ==> this.context ; cant change the value of context object \nbecauase we intialize it with default value.\n*/\n\n/*\nif you want to change the value inside the context object we have to create a component\nthat is going to act as a source of an information. That is App component bcz state knows\nthe language selected.\n*/\n\n/*\nApp copmonent render that context.provider function <LanguageContext.Provider>, the value prop\ngiven will be used to update the context object. Value is coming from state in our case.\n*/\n\n/*\nContext object has both provider and consumer property\n*/\n\n/*\nthis.context OR consumer ::: We use consumer if we want to get information out of 'multiple'\ncontext objects inside of a single component &&&\n\nusing this.context in conjunction with contextType property is only used anytime we are accessing\nsingle context object inside of a component.\n\n*/\n","import React from \"react\";\nimport LanguageContext from \"../contexts/LanguageContext\";\n\nclass Field extends React.Component {\n  static contextType = LanguageContext;\n  state = {};\n  render() {\n    const text = this.context === \"english\" ? \"Name\" : \"Naam\";\n    return (\n      <div className=\"ui field\">\n        <label>{text}</label>\n        <input />\n      </div>\n    );\n  }\n}\n\nexport default Field;\n","import React from \"react\";\n\nexport default React.createContext();\n","import React from \"react\";\nimport LanguageContext from \"../contexts/LanguageContext\";\nimport ColorContext from \"../contexts/ColorContext\";\n\nclass Button extends React.Component {\n  /*\n=> Create a context object (In our app we have LanguageContext object).\n=> Define context type in the nested component(child component).\n=> Thats it. You will get the this.context.\n*/\n  /*\nBy using Consumer function: In order to get the value out of the context object, we are going to pass a single function\nas a 'child'; that child would be called with whatever value inside our 'pipe'.\n*/\n  static contextType = LanguageContext;\n\n  renderButton(color) {\n    return (\n      <button className={`ui button ${color}`}>\n        <LanguageContext.Consumer>\n          {value => (value === \"english\" ? \"Submit\" : \"Voorleggen\")}\n        </LanguageContext.Consumer>\n      </button>\n    );\n  }\n\n  render() {\n    return (\n      <ColorContext.Consumer>\n        {color => this.renderButton(color)}\n      </ColorContext.Consumer>\n    );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\nimport Field from \"./Field\";\nimport Button from \"./Button\";\n\nconst UserCreate = () => {\n  return (\n    <div className=\"ui form\">\n      <Field />\n      <Button />\n    </div>\n  );\n};\n\nexport default UserCreate;\n","import React from \"react\";\nimport UserCreate from \"./UserCreate\";\n\nimport LanguageContext from \"../contexts/LanguageContext\";\nimport ColorContext from \"../contexts/ColorContext\";\n\nclass App extends React.Component {\n  state = {};\n\n  onLanguageChange = language => {\n    this.setState({ language });\n  };\n\n  render() {\n    return (\n      <div className=\"ui container\">\n        <div>\n          Select language:\n          <i\n            className=\"flag us\"\n            onClick={() => this.onLanguageChange(\"english\")}\n          />\n          <i\n            className=\"flag nl\"\n            onClick={() => this.onLanguageChange(\"dutch\")}\n          />\n        </div>\n        <ColorContext.Provider value=\"red\">\n          <LanguageContext.Provider value={this.state.language}>\n            <UserCreate />\n          </LanguageContext.Provider>\n        </ColorContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/*\nNOTE: Each separate use of LanguageContext.Provider creates a new,\nseparate 'Pipe' of information.\n*/\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n"],"sourceRoot":""}